<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>Planning Poker</title>
    <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
            crossorigin="anonymous"
    />
    <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />

    <link href="index.css" rel="stylesheet" type="text/css">

</head>
<body>
<div class="container">
    <header class="d-flex flex-wrap justify-content-center py-3 mb-4 border-bottom">
        <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none">
            <svg viewBox="146.8407 115.1491 279.5031 62.3119" width="279.5031" height="62.3119"
                 xmlns="http://www.w3.org/2000/svg">
                <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"
                   transform="matrix(4.090188980102539, 0, 0, 4.450847148895264, 115.13384246826172, 148.74057006835938)"
                   style="">
                    <g id="Artboard" transform="matrix(1, 0, 0, 1, -9, -7)">
                        <g id="Group-2" transform="matrix(1, 0, 0, 1, 16.751938, -0.54721)">
                            <rect id="Rectangle" fill="#020202" width="68.335" height="14" rx="4" style=""/>
                            <g id="Group" transform="translate(4.000000, 3.500000)" stroke-linecap="round"
                               stroke-linejoin="round" stroke-width="2">
                                <path class="path"
                                      d="M 56.186 6.5 L 56.186 0.5 L 58.186 0.5 C 59.291 0.5 60.186 1.395 60.186 2.5 C 60.186 3.605 59.291 4.5 58.186 4.5 L 56.186 4.5 L 58.186 4.5 L 60.186 6.5"
                                      id="r" stroke="#D8A7CD"/>
                                <path class="path"
                                      d="M 48.782 6.376 L 48.782 2.376 C 48.782 1.271 49.678 0.376 50.782 0.376 C 51.887 0.376 52.782 1.271 52.782 2.376 L 52.782 6.376 L 52.782 4.376 L 48.782 4.376"
                                      id="a2" stroke="#FEB4BE"/>
                                <path class="path" id="t" stroke="#FFA685"
                                      d="M 45.335 0.5 L 41.335 0.5 L 43.335 0.5 C 43.335 0.135 43.335 5.887 43.335 6.5"/>
                                <polyline class="path" id="l" stroke="#FFD59E" points="31.797 3.689"/>
                                <path class="path"
                                      d="M36,0.5 C37.1045695,0.5 38,1.3954305 38,2.5 L38,4.5 C38,5.6045695 37.1045695,6.5 36,6.5 C34.8954305,6.5 34,5.6045695 34,4.5 L34,2.5 C34,1.3954305 34.8954305,0.5 36,0.5 Z"
                                      id="o" stroke="#9BDACA"/>
                                <polyline class="path" id="v" stroke="#D8A7CD" points="26 0.5 28 6.5 30 0.5"/>
                                <path class="path" d="M18,6.5 L22,0.5" id="x2" stroke="#FEB4BE"/>
                                <path class="path" d="M18,0.5 L22,6.5" id="x1" stroke="#FEB4BE"/>
                                <path class="path"
                                      d="M10,6.5 L10,2.5 C10,1.3954305 10.8954305,0.5 12,0.5 C13.1045695,0.5 14,1.3954305 14,2.5 L14,6.5 L14,6.5 L14,4.5 L10,4.5"
                                      id="a" stroke="#FFA685"/>
                                <polyline class="path" id="m" stroke="#FFD59E"
                                          transform="translate(3.000000, 3.500000) scale(-1, 1) translate(-3.000000, -3.500000) "
                                          points="6 6.5 6 0.5 3 3.5 3.66373598e-15 0.5 3.66373598e-15 6.5"/>
                            </g>
                        </g>
                    </g>
                </g>
            </svg>
        </a>
    </header>

    <div class="navbar">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1 multicolortext">Current Task:</span>
            <span class="navbar-brand mb-0 p multicolortext" id="current-task"></span>
        </div>
    </div>

    <form id="user-form" style="margin-top: 2rem;margin-bottom: 2rem;">
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <input maxlength="6" type="text" id="usernameTxt" class="form-control" placeholder="Username..."/>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
            <div>
                <label class="fst-italic fw-bold">Choose your fighter:</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="CatCB" checked>
                <label class="form-check-label" for="CatCB">
                    Cat
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="RobotCB">
                <label class="form-check-label" for="RobotCB">
                    Robot
                </label>
            </div>
        </div>
    </form>

    <div id="estimate-form" style="display: none; margin-top: 2rem;">
        <button id="button1" type="button" class="btn estimate" onclick="estimate(1)">1</button>
        <button id="button2" type="button" class="btn estimate" onclick="estimate(2)">2</button>
        <button id="button3" type="button" class="btn estimate" onclick="estimate(3)">3</button>
        <button id="button5" type="button" class="btn estimate" onclick="estimate(5)">5</button>
        <button id="button8" type="button" class="btn estimate" onclick="estimate(8)">8</button>
        <button id="button13" type="button" class="btn estimate" onclick="estimate(13)">13</button>
    </div>

    <div id="usersCards" style="display: none;">

    </div>

    <div class="navbar" id="average" style="display: none; text-align: center; margin-top: 25px;">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1 multicolortext" id="averageTxt"> </span>
        </div>
    </div>

    <div class="background">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="../public/ejs.js"></script>
<script>
    const users = {};
    const socket = io();
    const taskForm = document.getElementById("task-form");
    const taskInput = document.getElementById("task");
    const currentTaskElement = document.getElementById("current-task");
    const userForm = document.getElementById("user-form");
    const usernameInput = document.getElementById("usernameTxt");
    const estimateForm = document.getElementById("estimate-form");
    const usersCards = document.getElementById("usersCards");
    const average = document.getElementById("average");
    const averageTxt = document.getElementById("averageTxt");

    let hiddenEstimates = true;

    userForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const username = usernameInput.value;
        if (username.trim() !== "") {
            usernameInput.value = "";
            let avatar;
            if (document.getElementById("RobotCB").checked) {
                avatar = getAvatar("");
            } else {
                avatar = getAvatar("set=set4");
            }
            console.log("user identify");
            socket.emit("user-identify", {username: username, estimate: null, avatar: avatar});
            userForm.style.display = "none";
            if (currentTaskElement.textContent !== "")
                estimateForm.style.display = "block";
        }
    });

    socket.on("new-task", (task) => {
        currentTaskElement.textContent = task;
        if (userForm.style.display === "none") {
            estimateForm.style.display = "block";
        }
        average.style.display = "none";
        if (!hiddenEstimates)
            socket.emit("clear-estimates");
        hiddenEstimates = true;
    });

    socket.on("load-cards", (users) => {
        usersCards.style.display = "flex";
        console.log("Load Cards", users, socket.id);
        updateCards(users);
    })

    const getAvatar = (type) => {
        const characters = 'abcdefghijklmnopqrstuvwxyz';
        let result = '';
        const charactersLength = characters.length;
        for (let i = 0; i < 3; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return `https://robohash.org/${result}.png?${type}`;
    }

    const updateCards = (users) => {
        usersCards.innerHTML = "";
        for (const socketId in users) {
            let user = users[socketId];
            if (user.estimate == null) {
                usersCards.innerHTML += `
                    <div class="card">
                        <img  class="card-img-top" alt="..." src=${user.avatar}>
                        <div class="card-body">
                            <h4 class="card-title">${user.username}</h4>
                            <h5 id=${user.username} class="card-text">-</h5>
                        </div>
                    </div>`
            } else if (hiddenEstimates) {
                usersCards.innerHTML += `
                    <div class="card">
                        <img class="card-img-top" alt="..." src=${user.avatar}>
                        <div class="card-body">
                            <h4 class="card-title">${user.username}</h4>
                            <h5 id=${user.username} class="card-text">?</h5>
                        </div>
                    </div>`;
            } else {
                usersCards.innerHTML += `
                    <div class="card">
                        <img  class="card-img-top" alt="..." src=${user.avatar}>
                        <div class="card-body">
                            <h4 class="card-title">${user.username}</h4>
                            <h5 id=${user.username} class="card-text">${user.estimate}</h5>
                        </div>
                    </div>`;
            }
        }
    }

    const estimate = function (estimate) {
        socket.emit("submit-estimate", estimate);
    };

    socket.on("new-estimate", (user) => {
        let estimate = document.getElementById(user.username);
        estimate.innerHTML = `<p id=${user.username} class="card-text">?</p>`;
    });

    const calculateAverage = (users) => {
        let sum = 0;
        let count = 0
        for (const user in users) {
            if (users[user].estimate !== null) {
                sum += users[user].estimate;
                count++;
            }
        }
        return sum / count;
    }

    function fire(ratio, opt) {
        confetti(Object.assign({}, opt, {
            origin: {y: .6},
            particleCount: Math.floor(200 * ratio)
        }));
    }

    socket.on("reveal-estimates", (users) => {
        hiddenEstimates = false;
        estimateForm.style.display = "none";
        updateCards(users);
        average.style.display = "block";
        averageTxt.innerText = "Average: " + calculateAverage(users);
        fire(.75, {
            spread: 80,
            startVelocity: 60
        });
        fire(.2, {spread: 60});
        fire(.35, {
            spread: 100,
            startVelocity: 30,
            decay: .92,
            scalar: 1.2
        });
        fire(.2, {
            spread: 120,
            startVelocity: 45
        });
    });

</script>
<script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
        crossorigin="anonymous"
></script>

<script
        src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"
></script>
<script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js"
        integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa"
        crossorigin="anonymous"
></script>
</body>
</html>
